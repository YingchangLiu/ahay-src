#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# SConstruct (Madagascar Script)
# 
# Purpose: Predictive Adaptative Error Filter (PEF) interpolation
# of a zero offset section and a data cube to increase CMP data sampling.
# 
# Site: https://dirack.github.io
# 
# Version 1.0
# 
# Programer: Rodolfo A C Neves (Dirack) 02/09/2020
# 
# Email: rodolfo_profissional@hotmail.com
# 
# License: GPL-3.0 <https://www.gnu.org/licenses/gpl-3.0.txt>.

from rsf.proj import *

# Import recipes
from rsf.recipes.kimodel import multiLayerModel as mlmod
from rsf.recipes.kimodel import kirchhoffNewtonModeling as kinewmod
from rsf.recipes.velocityAnalysis import velocityAnalysis as nmoStack
from rsf.recipes.pefInterpolation import pefInterpolation as pef

xmax = 6.0
zmax = 2.0

layers = ((0.30,0.50,0.20,0.30),
	  (1.65,1.85,1.55,1.65))

velocities = (1.508,
	      1.690,
	      2.0)

# Generate multi layer model and data cube
mlmod(interfaces='interfaces',
	dipsfile='interfacesDip',
	modelfile='mod1',
	xmax=xmax,
	zmax=zmax,
	layers=layers,
	velocities=velocities)

# Kirchhoff Newton modeling
kinewmod(reflectors='interfaces',
	reflectorsDip='interfacesDip',
	filename='multiLayerDataCube',
	velocities=velocities,
	nt=1001,
	dt=0.004,
	ns=201,
	ds=0.025,
	nh=161,
	dh=0.025)

# velocity analysis, NMO correction and stack
nmoStack(dataCube='multiLayerDataCube',
	pick='vnmo',
	stack='stackedSection',
	vrms='vrms',
	v0=1.5,
	dv=0.01,
	nv=100,
	vel0=1.5,
	rect1=15,
	rect2=40,
	rect3=3,
	dt=0.004)

# Transpose to (time x offset x CMP)
Flow('transposedSection','stackedSection','transp plane=23')

# PEF coeficients
a1=10
a2=4

# PEF smooth radius
rect1=10
rect2=5

# PEF interpolation of zero offset section
pef('transposedSection',
	'section',
	nm=201,
	dm=0.025,
	nt=1001,
	dt=0.004,
	nhi=1,
	a1=a1,
	a2=a2,
	rect1=rect1,
	rect2=rect2
)

# Section with increased CMP number of samples
Flow('interpolatedStackedSection','section','transp plane=23')

# PEF interpolation of some offset gathers
# of the data cube (time x offset x CMP)
pef('multiLayerDataCube',
	'interpolatedDataCube',
	nm=201,
	dm=0.025,
	nt=1001,
	dt=0.004,
	nhi=3,
	a1=a1,
	a2=a2,
	rect1=rect1,
	rect2=rect2
)

slices = []
for f2 in range(3):
    slice = 'slice%d' % f2
    Flow(slice,'interpolatedDataCube','window n2=1 f2=%d' % f2)
    Plot(slice,'grey title="Slice %d" ' % (f2+1))
    slices.append(slice)
Result('interpolatedDataCube',slices,'SideBySideAniso')

End()
