from rsf.proj import *

Fetch('mona.img','imgs')

Flow('mona','mona.img',
     '''
     echo n1=512 n2=513 in=$SOURCE data_format=native_uchar |
     dd type=float
     ''',stdin=0)

colors = {
    'i': 'Greyscale',
    'j': 'Jet',
    't': 'Traffic',
    'h': 'Hot',
    'p': 'Pink',
    'b': 'Bone',
    'f': 'Flag',
    'a': 'Rainbow',
    'c': 'Cool',
    'l': 'Linear',
    'e': 'Blue-white-red',
    'g': 'Black-white-red',
    'H': 'Hot Reversed',
    'iC': 'Greyscale Clipped',
    }

monas=[]
for col in colors.keys():
    if col != 'H' and col != 'iC':
        mona = 'mona-%s' % col
        monas.append(mona)
        Plot(mona,'mona',
             '''
             window n2=100 f2=130 |
             grey allpos=y pclip=100 scalebar=y crowd1=0.8
             color=%s title="%s (color=%s)"
             transp=n wantaxis=n titlesz=24
             ''' % (col,colors[col],col))
        
Plot('mona1',monas[0:6],'OverUnderAniso')
Plot('mona2',monas[6:12],'OverUnderAniso')
Result('mona','mona1 mona2','SideBySideAniso',vppen='txscale=1.5')

for col in ('h','H'):
    mona = 'mona+%s' % col
    if col=='H': mona = 'mona+caph'
    Plot(mona,'mona',
         '''
         grey allpos=y pclip=100 
         color=%s title="%s (color=%s)"
         transp=n wantaxis=n
         ''' % (col,colors[col],col))
Result('monacap','mona+h mona+caph','SideBySideIso',vppen='ysize=10 xsize=10')

for col in ('i','iC'):
    mona = 'mona+%s' % col
    Plot(mona,'mona',
         '''
         grey allpos=y pclip=98 screenratio=1
         color=%s title="%s (color=%s)"
         transp=n wantaxis=n
         ''' % (col,colors[col],col))
Result('monaclip','mona+i mona+iC','SideBySideIso',vppen='ysize=10 xsize=10')

colors = {
    'cubeyf1': 'Perceptual Rainbow',
    'gist_earth': 'GIST Earth',
    'linearlfb': 'LinearL Face Based',
    'x': 'Cube Helix',
    'lb': 'Light Bartlein',
    'seismic': 'Seismic-OpendTect',
    'izoaz': 'Isoluminant Azimuth',
    'montag': 'Spectral Lightness',
    'viridis': 'Default Matplotlib'
}

for col in colors.keys():
    Result(col,'mona',
           '''
           grey allpos=y pclip=100 scalebar=y crowd1=0.8
           color=%s title="%s (color=%s)"
           transp=n wantaxis=n screenratio=1 titlesz=8
           ''' % (col,colors[col],col))

#############################################################
# Crameri, F., G.E. Shephard, and P.J. Heron (2020), 
# The misuse of colour in science communication, Nature 
# Communications, 11, 5444. doi:10.1038/s41467-020-19160-7
# https://www.fabiocrameri.ch/colourmaps/
#############################################################

# Sequential color maps
sequential = {
    'batlow': 'sequential',
    'batlowW': 'sequential',
    'batlowK': 'sequential',
    'devon': 'sequential',
    'lajolla': 'sequential',
    'bamako': 'sequential',
    'davos': 'sequential',
    'bilbao': 'sequential',
    'nuuk': 'sequential',
    'oslo': 'sequential',
    'grayC': 'sequential',
    'hawaii': 'sequential',
    'lapaz': 'sequential',
    'tokyo': 'sequential',
    'buda': 'sequential',
    'acton': 'sequential',
    'turku': 'sequential',
    'imola': 'sequential'
}

for col,type in sequential.items():
    Result(col,'mona',
           '''
           grey allpos=y pclip=100 scalebar=y crowd1=0.8
           color=%s title="%s (color=%s)"
           transp=n wantaxis=n screenratio=1 titlesz=8
           ''' % (col,col+' '+type,col))

# Diverging color maps
diverging = {
    'broc': 'diverging',
    'cork': 'diverging',
    'vik': 'diverging',
    'lisbon': 'diverging',
    'tofino': 'diverging',
    'berlin': 'diverging',
    'roma': 'diverging',
    'bam': 'diverging',
    'vanimo': 'diverging'
}

for col,type in diverging.items():
    # Centered around the mean to simulate divergence
    Result(col,'mona',
           '''
           grey allpos=n pclip=100 scalebar=y crowd1=0.8
           color=%s title="%s (color=%s)" mean=y
           transp=n wantaxis=n screenratio=1 titlesz=8
           ''' % (col,col+' '+type,col))

# Multi-sequential color maps
multiseq = {
    'oleron': 'multi-sequential',
    'bukavu': 'multi-sequential',
    'fes': 'multi-sequential'
}

for col,type in multiseq.items():
    Result(col,'mona',
           '''
           grey allpos=n pclip=100 scalebar=y crowd1=0.8
           color=%s title="%s (color=%s)" mean=y
           transp=n wantaxis=n screenratio=1 titlesz=8
           ''' % (col,col+' '+type,col))

# Cyclic color maps
cyclic = {
    'romaO': 'cyclic',
    'bamO': 'cyclic',
    'brocO': 'cyclic',
    'corkO': 'cyclic',
    'vikO': 'cyclic'
}

for col,type in cyclic.items():
    Result(col,'mona',
           '''
           grey allpos=y pclip=100 scalebar=y crowd1=0.8
           color=%s title="%s (color=%s)" mean=n
           transp=n wantaxis=n screenratio=1 titlesz=8
           ''' % (col,col+' '+type,col))

#####################################################
# Other palettes
#####################################################

other = {
    'inferno': '',
    'magma': '',
    'plasma': '',
}

for col,type in other.items():
    Result(col,'mona',
           '''
           grey allpos=y pclip=100 scalebar=y crowd1=0.8
           color=%s title="%s (color=%s)" mean=n
           transp=n wantaxis=n screenratio=1 titlesz=8
           ''' % (col,col+' '+type,col))

End()
