from rsf.proj import *

############################################################################
# RTM related results can not be produced by simply running "scons view", because they were generated with python script on Stampede -- supercomputing system provided by TACC. You can find all the computing commands in the commented part and the corresponding python scripts in the directory.
###########################################################################

# 1. Generate a reflector model
# #############################
Flow('lay1.asc',None,
     '''
     echo
     0 750 1000 850
     2000 600 3000 1000
     4000 700 5000 600
     n1=2 n2=6 in=$TARGET
     data_format=ascii_float
     ''')
Flow('lay2.asc',None,
     '''
     echo
     0 1700 1000 1500
     1500 1400 2000 1300
     3000 1300 3500 1400
     4000 1500 5000 1700
     n1=2 n2=8 in=$TARGET
     data_format=ascii_float
     ''')
dim='n1=501 d1=10 o1=0'
Flow('lay1','lay1.asc','dd form=native |spline %s' %dim)
Flow('lay2','lay2.asc','dd form=native |spline %s' %dim)
Flow('lay3',None,'math %s output="1900+x1*0.1"' %dim)
Flow('lay4',None,'math %s output=2650' %dim)
Flow('lays','lay1 lay2 lay3 lay4','cat axis=2 ${SOURCES[1:4]}')

Flow('vel_','lays',
     '''
     unif2 n1=301 d1=10 o1=0 v00=3000,3200,3400,3650,4000 |
     put label1=Depth unit1=m label2=Distance unit2=m
     label=Velocity
     ''')
Result('vel-syn','vel_','grey labelsz=9 title= allpos=y color=j scalebar=y barreverse=y barunit=m/s bias=3000 screenratio=0.6')
Flow('vel','vel_','pad2 left=200 right=200 top=100')

# 2. Test the effectiveness of structural-enhancing filtering
# ###########################################################
Flow('dip','vel_',
     'dip rect1=5 rect2=9 order=2')
Result('dip','grey title= scalebar=y pclip=100 color=j barlabel=Slope barunit= screenratio=0.6 labelsz=9')
    
Flow('point.asc',None,'echo 850 1000 1500 1000 2000 1000 2650 1000 600 2000 1300 2000 2100 2000 2650 2000 1000 3000 1300 3000 2200 3000 2650 3000 700 4000 1500 4000 2300 4000 2650 4000 n1=32 in=$TARGET data_format=ascii_float')
Flow('point','point.asc','dd form=native | dd type=complex')

Result('points','point',
		'''
		graph labelrot=n wantaxis=n 
		title= yreverse=y wherexlabel=t 
		min2=0 max2=5000 label2=Distance unit2=m transp=y
		min1=0 max1=3000 label1=Depth unit1=m
		symbol=. plotcol=4 plotfat=20 wantaxis=y wanttitle=n
		screenratio=0.6 labelsz=9 
		''')

Flow('spikes',None,
     '''
	 spike n1=301 n2=501 d2=10 o2=0 d1=10 o1=0 nsp=16
	 k1=85,150,200,265,60,130,210,265,100,130,220,265,70,150,230,265
	 k2=100,100,100,100,200,200,200,200,300,300,300,300,400,400,400,400
     ''')
Result('spikes','smooth rect1=3 rect2=3 |grey wanttitle=n allpos=y pclip=100 label1=Depth label2=Distance unit1=m unit2=m labelsz=9 screenratio=0.6')

for i in (20,40,90):
    Flow('ptris%d' %i,'spikes dip',
	    '''
		bandpass fhi=0.02|
		pwsmooth dip=${SOURCES[1]} ns=%d |
		bandpass fhi=0.03
		''' %i)
    Result('ptris%d' %i,'grey wanttitle=n allpos=y label1=Depth label2=Distance unit1=m unit2=m labelsz=9 screenratio=0.6')

# 3. Prepare reflectivity, source wavelet and lowrank decomposed matrices
# #######################################################################
Flow('rref','vel',
     '''
     depth2time velocity=$SOURCE nt=2000 dt=0.002 |
     ai2refl |ricker1 frequency=20 |
     time2depth velocity=$SOURCE |
     math output=input*100
     ''')
Flow('iref','vel',
     '''
     depth2time velocity=$SOURCE nt=2000 dt=0.002 |
     ai2refl |ricker1 frequency=20 | envelope hilb=y order=500 |
     time2depth velocity=$SOURCE |
     math output=input*100
     ''')
Flow('ref','rref iref','cmplx ${SOURCES[1]}')
Result('ref','real |window f1=100 f2=200 n2=501 |grey title= label1=Depth label2=Distance labelsz=9 screenratio=0.6')

def srcgen(par):
    dtt=0.0005
    fac=par['dt']/dtt
    ntt=(par['nt']-1)*fac+1
    ktt=(par['srcbgn']-1)*fac+1

    Flow('source1',None,
         '''
         spike n1=%d d1=%g k1=%d |
         ricker1 frequency=%g |
		 math output="input*100"
         '''%(ntt,dtt,ktt,par['frq']))
    Flow('realsrc','source1','math "output=0"')
    Flow('imagsrc','source1','envelope hilb=y order=500| halfint | halfint | math output="input/2" ')
    
    Flow('csource1','realsrc imagsrc','cmplx ${SOURCES[1]}')
    Flow('csource','csource1','window j1=%d'% fac)
    return 'csource'    

# Set lowrank program parameter
rtmpar = {
    'nx':  901,    # velocity model length 
    'nz':  401,     # velocity model depth
    'nt' :  1501,    # record time length
    'dx' :  10.0,   # sampling in x
    'dz' :  10.0,  # sampling in z
    'dt' :  0.002,   # sampling in time
    'labelx': "Distance",
    'labelz': "Depth",
    'unitx' : "m",
    'unitz' : "m",
    'shtbgn': 0, # imaged shot starting location on mesh
    'shtend': 900, # shot ending location on mesh 
    'sintv' : 100,    # shot interval on mesh
    'spz'   : 10,    # shot depth on mesh
    'gpz'   : 10,    # receiver depth on mesh
    'gpl'   : 901,  # receiver length of single shot
    'snpint': 1,    # snapshot interval
    'pad1'  : 1,    # fft pading on the first axis
    # abc parameters 
    'top'   : 50,  # padding length
    'bot'   : 50,
    'lft'   : 50,
    'rht'   : 50,
    'dcz'   : 0.01, # decay coefficient
    'dcx'   : 0.01,
    #source
    'srcbgn'  : 40, # source begin time
    'frq'     : 20  # peak frequency of ricker wavelet (in Hz)
    }

# -------------------------------
par=rtmpar
Fsrc  = srcgen(par)
#Fsrc = 'csource'
Result(Fsrc,'imag | graph  title="Source Wavelet" ')

Ffvel = 'vel'
Ffvelabc = Ffvel+'_ext'
Ffft = 'fft'
Fleft = 'left'
Fright = 'right'
Fbleft = 'bleft'
Fbright = 'bright'

for m in [Ffvel]:
    ext  = m+'_ext'
    Flow(ext,m,
         '''
         pad2 left=%(lft)d right=%(rht)d 
                top=%(top)d  bottom=%(bot)d
         '''%par)
Flow(Ffft,Ffvelabc,'rtoc | fft3 axis=1 pad=1 | fft3 axis=2 pad=1')
Flow([Fright,Fleft],[Ffvelabc,Ffft],
     '''
      cisolr2abc seed=2010 dt=%(dt)g fft=${SOURCES[1]} left=${TARGETS[1]}
      nbt=%(top)d nbb=%(bot)d nbl=%(lft)d nbr=%(rht)d 
      ct=%(dcz)g cb=%(dcz)g cl=%(dcx)g cr=%(dcx)g
      rev=n
     '''%par)
Flow([Fbright,Fbleft],[Ffvelabc,Ffft],
     '''
      cisolr2abc seed=2010 dt=%(dt)g fft=${SOURCES[1]} left=${TARGETS[1]}
      nbt=%(top)d nbb=%(bot)d nbl=%(lft)d nbr=%(rht)d 
      ct=%(dcz)g cb=%(dcz)g cl=%(dcx)g cr=%(dcx)g
      rev=y
     '''%par)

# 4. Numerical test for the incomplete data case
# ##############################################

# ## Model the data

Flow('shots16','ref csource vel_ext left right bleft bright',
     '''
     mpilrrtm src=${SOURCES[1]} vel=${SOURCES[2]} 
     left=${SOURCES[3]} right=${SOURCES[4]} leftb=${SOURCES[5]} rightb=${SOURCES[6]} 
     verb=y pad1=1 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 
     rectz=2 rectx=2 repeat=2 srctrunc=0.4 wantwf=n wantrecord=y illum=n roll=n adj=n 
     fm=y shtbgn=0 shtend=900 shtint=60
     ''')

# <ref.rsf sflrrtm src=csource.rsf tmpwf=tmpwf.rsf vel=vel_ext.rsf left=left.rsf right=right.rsf leftb=bleft.rsf rightb=bright.rsf verb=y pad1=1 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.4 wantwf=n wantrecord=y illum=n roll=n adj=n fm=y shtbgn=0 shtend=900 shtint=60 >shots16.rsf
# Note that we did't use the borning modeling, even though we regard reflectivity as input.
# The argument "fm=y" will let the program to perform forward modeling.

# Flow('shots16','shots16.hh','cp')

# ## Mute direct wave
real=[]
Flow('real16','shots16','real')
for i in range(16):
    shot='rshot%d' %i
    Flow(shot,'real16',
	    '''
		window n3=1 f3=%d |
		mutter x0=%g t0=%g v0=%g half=n |
		cut max1=1.
		''' %(i, -2500+i*600, 0.22, 3000))
    real.append(shot)
Flow('real',real,'cat axis=3 ${SOURCES[1:%d]}' %len(real))

imag=[]
Flow('imag16','shots16','imag')
for i in range(16):
    shot='ishot%d' %i
    Flow(shot,'imag16',
	    '''
		window n3=1 f3=%d |
		mutter x0=%g t0=%g v0=%g half=n |
		cut max1=1.
		''' %(i, -2500+i*600, 0.22, 3000))
    imag.append(shot)
Flow('imag',imag,'cat axis=3 ${SOURCES[1:%d]}' %len(imag))

Flow('muteshots16','real imag','cmplx ${SOURCES[1]}')

# ## Incomplete data with 80% traces missing
data="muteshots16"
Flow('mask',data,'window n1=1 |real |noise rep=y seed=2008 type=n|mask min=0.3')
Result('mask','dd type=float |grey transp=n yreverse=n scalebar=y title="" label1="Trace" label2="Shot" allpos=y')
Flow('zero16',[data,'mask'],'headercut mask=${SOURCES[1]}')

Flow('synshots16','shots16 mask','headercut mask=${SOURCES[1]}')

#*F2-a Plot incomplete data
####################
Result('synshots16',
    '''
	real |
	window n2=501 f2=200 |
	put o2=0 label3=#Shot o3=0 d3=1|
	byte gainpanel=all pclip=97|
	grey3 frame1=1050 frame2=250 frame3=8
	point1=0.8 point2=0.9 title= flat=n unit3=
	labelsz=9 screenratio=0.6
	''')

# ## RTM of incomplete data
# <zero16.rsf sflrrtm src=csource.rsf tmpwf=tmpwf.rsf vel=vel_ext.rsf left=left.rsf right=right.rsf leftb=bleft.rsf rightb=bright.rsf verb=y pad1=1 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.4 wantwf=n wantrecord=y illum=n roll=n adj=y fm=n shtbgn=0 shtend=900 shtint=60 incom=y mask=mask.rsf>inimg16.rsf

#Flow('inimg16','inimg16.hh','cp')

Flow('inimg16','zero16 csource vel_ext left right bleft bright mask',
     '''
     mpilrrtm src=${SOURCES[1]} vel=${SOURCES[2]} left=${SOURCES[3]} right=${SOURCES[4]} 
     leftb=${SOURCES[5]} rightb=${SOURCES[6]} verb=y pad1=1 spz=10 gpz=10 gpl=901 
     snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.4 
     wantwf=n wantrecord=y illum=n roll=n adj=y fm=n shtbgn=0 shtend=900 shtint=60 
     incom=y mask=${SOURCES[5]}
     ''')

# ## LSRTM of incomplete data
# <zero16.rsf sfcconjgrad sflrrtm mod=inimg16.rsf incom=y mask=mask.rsf src=csource.rsf tmpwf=tmpwf.rsf vel=vel_ext.rsf left=left.rsf right=right.rsf leftb=bleft.rsf rightb=bright.rsf verb=n pad1=1 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.4 wantwf=n wantrecord=y illum=n roll=n shtbgn=0 shtend=900 shtint=60>incg20.rsf niter=20

Flow('incg20','zero16 inimg16 mask csource vel_ext left right bleft bright',
     '''
     cconjgradmpi mpilrrtm mod=${SOURCES[1]} incom=y mask=${SOURCES[2]} 
     src=${SOURCES[3]} vel=${SOURCES[4]} left=${SOURCES[5]} right=${SOURCES[6]} 
     leftb=${SOURCES[7]} rightb=${SOURCES[8]} verb=n pad1=1 spz=10 gpz=10 gpl=901 
     snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 
     srctrunc=0.4 wantwf=n wantrecord=y illum=n roll=n shtbgn=0 
     shtend=900 shtint=60 niter=20
     ''')

# ## LSRTM of complete data for comparison

# <muteshots16.rsf sfcconjgrad sflrrtm mod=inimg16.rsf src=csource.rsf tmpwf=tmpwf.rsf vel=vel_ext.rsf left=left.rsf right=right.rsf leftb=bleft.rsf rightb=bright.rsf verb=n pad1=1 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.4 wantwf=n wantrecord=y illum=n roll=n shtbgn=0 shtend=900 shtint=60>benchmark20.rsf niter=20

Flow('benchmark20','muteshots16 inimg16 csource vel_ext left right bleft bright',
     '''
     cconjgradmpi mpilrrtm mod=${SOURCES[1]}  
     src=${SOURCES[2]} vel=${SOURCES[3]} left=${SOURCES[4]} right=${SOURCES[5]} 
     leftb=${SOURCES[6]} rightb=${SOURCES[7]} verb=n pad1=1 spz=10 gpz=10 gpl=901 
     snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 
     srctrunc=0.4 wantwf=n wantrecord=y illum=n roll=n shtbgn=0 
     shtend=900 shtint=60 niter=20
     ''')

# ## LSRTM of incomplete data with python script
# python synincg.py data=zero16.rsf init=inimg16.rsf niter=20 result=ininv20.rsf
#
# Data misft change of LSRTM with incomplete data
#0 7.86526
#1 4.8874
#2 2.94942
#3 2.48904
#4 2.20251
#5 2.00949
#6 1.82708
#7 1.55029
#8 1.21273
#9 1.12378
#10 0.969005
#11 0.820642
#12 0.745174
#13 0.66837
#14 0.596779
#15 0.555667
#16 0.526131
#17 0.469383
#18 0.429329
#19 0.408083
#20 0.378897

# ## LSRTM-SR of incomplete data
Flow('dipmask','inimg16','real |math output=1 | cut max1=100')
Flow('windip0','inimg16 dipmask','real |fdip mask=${SOURCES[1]} rect1=15 rect2=20')
Result('windip0','grey color=j scalebar=y title=Dip clip=0.5 minval=-0.5 maxval=0.5')


# python syninshape.py data=zero16.rsf init=inimg16.rsf dip=windip0.rsf niter=20 result=inshape20.rsf
#
# Data misfit change of LSRTM-SR with incomplete data
#0 7.86526
#1 4.72998
#2 2.91061
#3 2.46646
#4 2.17766
#5 2.00247
#6 1.88946
#7 1.75565
#8 1.49371
#9 1.12348
#10 1.0008
#11 0.938055
#12 0.848889
#13 0.742436
#14 0.680392
#15 0.651802
#16 0.613686
#17 0.577094
#18 0.518524
#19 0.474417
#20 0.4542

#  F3 and F4
#######################
#Flow('incg20','incg20.hh','cp')
Flow('inshape5','inshape5.hh','cp')
Flow('inshape20','inshape20.hh','cp')
Result('syninimg16','inimg16','real |window n2=501 f2=200 f1=100 |put o1=0 o2=0 |laplac|grey title= screenratio=0.6 labelsz=9 pclip=99 color=g')
Result('synincg20','incg20','real |window f1=100 f2=200 n2=501|laplac|put o1=0 o2=0 | grey title= screenratio=0.6 labelsz=9 pclip=99 color=g')
Result('syninshape5','inshape5','real |window f1=100 f2=200 n2=501|laplac|put o1=0 o2=0 | grey title= screenratio=0.6 labelsz=9 pclip=99 color=g')
Result('syninshape20','inshape20','real |window f1=100 f2=200 n2=501|laplac|put o1=0 o2=0 | grey title= screenratio=0.6 labelsz=9 pclip=99 color=g')
# scons Fig/syninimg16.vpl Fig/synincg20.vpl Fig/syninshape5.vpl Fig/syninshape20.vpl

Flow('synindip0','inimg16','real |fdip rect1=15 rect2=20 |window n2=501 f2=200 f1=100 |put o1=0 o2=0')
Result('synindip0','grey color=j scalebar=y title= screenratio=0.6')
# scons Fig/synindip0.vpl Fig/synindip19.vpl 

Flow('syninfilimg','inimg16 synindip0','real |window n2=501 f2=200 f1=100 |pwsmooth dip=${SOURCES[1]} ns=5 verb=1')
Result('syninfilimg','laplac |put o1=0 o2=0 |grey title= screenratio=0.6 labelsz=9 pclip=99 color=g')
# scons Fig/syninfilimg.vpl

Flow('inshape19','inshape19.hh','cp')
Flow('synindip19','inshape19','real |fdip rect1=15 rect2=20 |window n2=501 f2=200 f1=100 |put o1=0 o2=0')
Result('synindip19','grey color=j scalebar=y title= screenratio=0.6')

# ## L2 data misfit (the output of inshape.py)
Flow('synincg.asc',None,
    '''
	echo 7.87 4.89 2.95 2.49 2.20 2.00 1.83 1.55 1.21 1.12
	0.97 0.82 0.75 0.67 0.60 0.556 0.526 0.469 0.429 0.408 0.379
    n1=21 o1=0 d1=1 in=$TARGET
    data_format=ascii_float 
    ''')
Flow('synincgnorm','synincg.asc','dd form=native |scale axis=1')

Flow('syninshape.asc',None,
    '''
	echo 7.87 4.73 2.91 2.47 2.18 2.00 1.89 1.76 1.49 1.12
	1.00 0.94 0.85 0.74 0.68 0.652 0.614 0.577 0.519 0.474 0.454
    n1=21 o1=0 d1=1 in=$TARGET
    data_format=ascii_float 
    ''')
Flow('syninshapenorm','syninshape.asc','dd form=native |scale axis=1')

# ## Plot figures
Result('synincurve','synincgnorm syninshapenorm',
		'''
		cat axis=2 ${SOURCES[1]} |
		graph title= unit1= label1=Iterations  symbolsz=10
		label2="Normalized L2 Misfit" unit2=
		wherexlabel=t screenratio=0.6 labelsz=9
		dash=1,0 min2=0 plotfat=5
		''')

# 5. Numerical test for the simultaneous-source data case
# #######################################################

# ## Model simultaneous-source data
# <ref.rsf sflrrtm src=csource.rsf tmpwf=tmpwf.rsf vel=vel_ext.rsf left=left.rsf right=right.rsf leftb=bleft.rsf rightb=bright.rsf verb=y pad1=1 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.6 wantwf=n wantrecord=y illum=n roll=n nsource=2 dsource=450 tdelay=0.2 adj=n shtbgn=0 shtend=450 shtint=30 fm=y choose=0 >2shot16-part1.rsf
# <ref.rsf sflrrtm src=csource.rsf tmpwf=tmpwf.rsf vel=vel_ext.rsf left=left.rsf right=right.rsf leftb=bleft.rsf rightb=bright.rsf verb=y pad1=1 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.6 wantwf=n wantrecord=y illum=n roll=n nsource=2 dsource=450 tdelay=0.2 adj=n shtbgn=0 shtend=450 shtint=30 fm=y choose=1 >2shot16-part2.rsf

Flow('2shot16-part1','2shot16-part1.hh','cp')
Flow('2shot16-part2','2shot16-part2.hh','cp')

# ## Mute direct wave
real=[]
Flow('2real16-part1','2shot16-part1','real')
for i in range(16):
    shot='rshotpart1-%d' %i
    Flow(shot,'2real16-part1',
	    '''
		window n3=1 f3=%d |
		mutter x0=%g t0=%g v0=%g half=n |
		cut max1=1.
		''' %(i, -2500+i*300, 0.22, 3000))
    real.append(shot)
Flow('real2',real,'cat axis=3 ${SOURCES[1:%d]}' %len(real))

imag=[]
Flow('2imag16-part1','2shot16-part1','imag')
for i in range(16):
    shot='ishotpart1-%d' %i
    Flow(shot,'2imag16-part1',
	    '''
		window n3=1 f3=%d |
		mutter x0=%g t0=%g v0=%g half=n |
		cut max1=1.
		''' %(i, -2500+i*300, 0.22, 3000))
    imag.append(shot)
Flow('imag2',imag,'cat axis=3 ${SOURCES[1:%d]}' %len(imag))

real=[]
Flow('2real16-part2','2shot16-part2','real')
for i in range(16):
    shot='rshotpart2-%d' %i
    Flow(shot,'2real16-part2',
	    '''
		window n3=1 f3=%d |
		mutter x0=%g t0=%g v0=%g half=n |
		cut max1=1.
		''' %(i, 2000+i*300, 0.42, 3000))
    real.append(shot)
Flow('real3',real,'cat axis=3 ${SOURCES[1:%d]}' %len(real))

imag=[]
Flow('2imag16-part2','2shot16-part2','imag')
for i in range(16):
    shot='ishotpart2-%d' %i
    Flow(shot,'2imag16-part2',
	    '''
		window n3=1 f3=%d |
		mutter x0=%g t0=%g v0=%g half=n |
		cut max1=1.
		''' %(i, 2000+i*300, 0.42, 3000))
    imag.append(shot)
Flow('imag3',imag,'cat axis=3 ${SOURCES[1:%d]}' %len(imag))

Flow('realsum','real2 real3','add ${SOURCES[1]}')
Flow('imagsum','imag2 imag3','add ${SOURCES[1]}')

Flow('mute2shots16','realsum imagsum','cmplx ${SOURCES[1]}')

Flow('temreal','2real16-part1 2real16-part2','add ${SOURCES[1]}')
Flow('temimag','2imag16-part1 2imag16-part2','add ${SOURCES[1]}')
Flow('syn2shots16','temreal temimag','cmplx ${SOURCES[1]}')

#F2-b
#####
Result('syn2shots16',
    '''
	real |
	window n2=501 f2=200 |
	put o2=0 label3="#Super Shot" o3=0 d3=1|
	byte gainpanel=all pclip=95|
	grey3 frame1=1050 frame2=250 frame3=8
	point1=0.8 point2=0.9 title= flat=n unit3=
	labelsz=9 screenratio=0.6 
	label3="#Super-Shot"
	''')

# ## RTM of simultaneous-source data
# <mute2shots16.rsf sflrrtm src=csource.rsf tmpwf=tmpwf.rsf vel=vel_ext.rsf left=left.rsf right=right.rsf leftb=bleft.rsf rightb=bright.rsf verb=y pad1=1 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.6 wantwf=n wantrecord=y illum=n roll=n nsource=2 dsource=450 tdelay=0.2 adj=y shtbgn=0 shtend=450 shtint=30 >2img16.rsf

Flow('2img16','2img16.hh','cp')

# ## LSRTM of simultaneous-source data
# <mute2shots16.rsf sfcconjgrad sflrrtm mod=2img16.rsf src=csource.rsf tmpwf=tmpwf.rsf vel=vel_ext.rsf left=left.rsf right=right.rsf leftb=bleft.rsf rightb=bright.rsf verb=n pad1=1 shtbgn=0 shtend=450 shtint=30 spz=10 gpz=10 gpl=901 snapinter=1 top=50 bot=50 lft=50 rht=50 rectz=2 rectx=2 repeat=2 srctrunc=0.6 wantwf=n wantrecord=y illum=n roll=n nsource=2 dsource=450 tdelay=0.2 >synsimcg20.rsf niter=20
 
# python synsimcg.py data=mute2shots16.rsf init=2img16.rsf niter=20 result=synsiminv20.rsf
#
#0 73.2893
#1 46.2884
#2 27.754
#3 23.6541
#4 20.8587
#5 18.701
#6 17.2743
#7 14.7042
#8 10.8877
#9 10.2797
#10 8.89265
#11 7.7169
#12 6.90544
#13 6.01273
#14 5.31619
#15 5.17239
#16 4.58693
#17 4.19529
#18 3.96158
#19 3.61377
#20 3.41754
#21 3.24721
#22 3.17992
#23 2.98128
#24 2.78008
#25 2.57574
#26 2.41471
#27 2.35478
#28 2.2448
#29 2.20487
#30 2.09796

# ## LSRTM-SR of simultaneous-source data
Flow('simdip0','2img16','real | fdip rect1=15 rect2=20')
# python synsimshape.py data=mute2shots16.rsf init=2img16.rsf dip=simdip0.rsf niter=20 result=synsimshape20.rsf
#
#0 73.2893
#1 45.663
#2 27.7044
#3 23.6286
#4 20.7011
#5 18.6084
#6 17.3072
#7 14.9651
#8 13.4511
#9 10.3988
#10 8.66788
#11 7.64571
#12 6.92002
#13 6.66702
#14 5.99485
#15 5.80285
#16 5.39249
#17 4.73492
#18 4.1868
#19 3.8641
#20 3.71026

### F5 and F6
Flow('synsimcg20','synsimcg20.hh','cp')
Flow('synsimshape5','synsimshape5.hh','cp')
Flow('synsimshape20','synsimshape20.hh','cp')
Result('syn2img16','2img16','real |window n2=501 f2=200 f1=100 |put o1=0 o2=0 |laplac|grey title= screenratio=0.6 color=g labelsz=9 pclip=99')
Result('synsimcg20','real |window f1=100 f2=200 n2=501|laplac|put o1=0 o2=0 | grey title= screenratio=0.6 color=g labelsz=9 pclip=99')
Result('synsimshape5','real |window f1=100 f2=200 n2=501|laplac|put o1=0 o2=0 | grey title= screenratio=0.6 color=g labelsz=9 pclip=99')
Result('synsimshape20','real |window f1=100 f2=200 n2=501|laplac|put o1=0 o2=0 | grey title= screenratio=0.6 color=g labelsz=9 pclip=99')
# scons Fig/syn2img16.vpl Fig/synsimcg20.vpl Fig/synsimshape5.vpl Fig/synsimshape20.vpl

Flow('synsimdip0','2img16','real |fdip rect1=15 rect2=20 |window n2=501 f2=200 f1=100 |put o1=0 o2=0')
Result('synsimdip0','grey color=j scalebar=y title= screenratio=0.6 labelsz=9')

Flow('synsimshape19','synsimshape19.hh','cp')
Flow('synsimdip19','synsimshape19','real |fdip rect1=15 rect2=20 |window n2=501 f2=200 f1=100 |put o1=0 o2=0')
Result('synsimdip19','grey color=j scalebar=y title= screenratio=0.6 labelsz=9')
# scons Fig/synsimdip0.vpl Fig/synsimdip19.vpl 

Flow('synsimfilimg','2img16 synsimdip0','real |window n2=501 f2=200 f1=100 |pwsmooth dip=${SOURCES[1]} ns=4 verb=1')
Result('synsimfilimg','laplac |put o1=0 o2=0 |grey title= screenratio=0.6 color=g labelsz=9 pclip=99')
# scons Fig/synsimfilimg.vpl

# ## L2 data misfit
Flow('synsimcg.asc',None,
    '''
	echo 73.29 46.29 27.75 23.65 20.86 18.70 17.27 14.70 10.89 10.28
	8.89 7.72 6.91 6.01 5.32 5.17 4.59 4.20 3.96 3.61 3.41
    n1=21 o1=0 d1=1 in=$TARGET
    data_format=ascii_float 
    ''')
Flow('synsimcgnorm','synsimcg.asc','dd form=native |scale axis=1')

Flow('synsimshape.asc',None,
    '''
	echo 73.29 45.66 27.70 23.63 20.70 18.61 17.31 14.97 13.45 10.40
	8.67 7.65 6.92 6.668 5.995 5.803 5.392 4.735 4.187 3.864 3.710
    n1=21 o1=0 d1=1 in=$TARGET
    data_format=ascii_float 
    ''')
Flow('synsimshapenorm','synsimshape.asc','dd form=native |scale axis=1')

# ## Plot figures
Result('synsimcurve','synsimcgnorm synsimshapenorm',
		'''
		cat axis=2 ${SOURCES[1]} |
		graph title= unit1= label1=Iterations  symbolsz=10
		label2="Normalized L2 Misfit" unit2=
		wherexlabel=t screenratio=0.6 labelsz=9
		dash=1,0 min2=0 plotfat=5
		''')
#scons Fig/synsimcurve.vpl
# cp Fig/synsimcurve.vpl Fig/synsimfilimg.vpl Fig/synsimdip0.vpl Fig/synsimdip19.vpl Fig/syn2img16.vpl Fig/synsimcg20.vpl Fig/synsimshape5.vpl Fig/synsimshape20.vpl Fig/syn2shots16.vpl Fig/synincurve.vpl Fig/syninfilimg.vpl Fig/synindip0.vpl Fig/synindip19.vpl Fig/syninimg16.vpl Fig/synincg20.vpl Fig/syninshape5.vpl Fig/syninshape20.vpl Fig/synshots16.vpl Fig/synfigs/

End()
