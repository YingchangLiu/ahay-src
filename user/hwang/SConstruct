import os,sys

try:
    glob_build = True
    srcroot = '../..'
    Import('env bindir libdir pkgdir')
except:
    # SConscript('../../api/c/SConstruct')
    SConscript('../lexing/SConstruct')
    SConscript('../../su/lib/SConstruct')
    glob_build = False # scons command launched in the local directory
    srcroot = os.environ.get('RSFSRC', '../..')
    bindir = libdir = pkgdir = None

sys.path.append(os.path.join(srcroot,'framework'))
import bldutil

if glob_build:
    env = env.Clone()
else:
    env = bldutil.Debug() # Debugging flags for compilers

#-------------------------------------------------------------------------

cprogs = '''permwave2d'''
ccprogs = '''permlr2ddti'''
cuprogs = '''awefd3dgpu'''
cmpiprogs = '''mpitransp'''

#--------------------------------------------------------------------------
lapack = env.get('LAPACK')
#print lapack
if lapack and not isinstance(lapack,bool):
    env.Append(LIBS=lapack)
fftw = env.get('FFTW')
if fftw:                                                                         
    env.Prepend(CPPDEFINES=['SF_HAS_FFTW'])   

# ------------------------ COMPILE C PROGRAMS ------------------------------
cflags = env.get('CFLAGS')
clinkflags = env.get('LINKFLAGS')
cpppath = env.get('CPPPATH')
clibpath = env.get('LIBPATH')
clibs = env.get('LIBS')
env_c = env.Clone()
# -------
ctargets = bldutil.HuiSconsTargets(cfiles=cprogs)
ctargets.build_c(env_c, glob_build, srcroot, bindir, libdir, pkgdir)

# ------------------------ COMPILE CC PROGRAMS ------------------------------
ccflags = env.get('CXXFLAGS')
cclinkflags = env.get('LINKFLAGS')
ccpppath = env.get('CPPPATH')
cclibpath = env.get('LIBPATH')
cclibs = env.get('LIBS')
env_cc = env.Clone()
# ------
ccmains = Split(ccprogs)
if 'permlr2ddti' in ccmains:
    env_cc.Prepend(LIBS=['vecmatop'])
#env_cc.Replace(CXXFLAGS=ccflags,LINKFLAGS=cclinkflags,LIBS=cclibs)
#------
cctargets = bldutil.HuiSconsTargets(ccfiles=ccprogs)
if lapack:
    cctargets.has_lapack = True
cctargets.build_cc(env_cc,glob_build,srcroot,bindir,libdir,pkgdir)

# ------------------------ COMPILE CUDA PROGRAMS ---------------------------
cuflags = env.get('CUDAFLAGS')
culinkflags = ''
# cupppath = ''
# culibpath = ''
# culibs = ''
cupppath = env.get('CPPPATH')
culibpath = env.get('LIBPATH')
culibs = env.get('LIBS')
# -------
env_cu = env.Clone()
nvcc = env.get('NVCC')

env_cu.Replace(CXX=nvcc,CXXFLAGS=cuflags,LINKFLAGS=culinkflags,LIBS=culibs)
#------
cutargets = bldutil.HuiSconsTargets(cufiles=cuprogs)
if nvcc:
    cutargets.has_nvcc = True
cutargets.build_cu(env_cu, glob_build, srcroot, bindir, libdir, pkgdir)

# ------------------------ COMPILE C MPI PROGRAMS ---------------------------
cmpiflags = env.get('CFLAGS')
cmpilinkflags = env.get('LINKFLAGS')
cmpipppath = env.get('CPPPATH')
cmpilibpath = env.get('LIBPATH')
cmpilibs = env.get('LIBS')
env_c_mpi = env.Clone()
# ------
cmpitargets = bldutil.HuiSconsTargets(cmpifiles=cmpiprogs)
cmpitargets.build_c_mpi(env_c_mpi, glob_build, srcroot, bindir, libdir, pkgdir)

#-------------------------- INSTALL DOCUMENTS --------------------------------
bldutil.HuiSconsTargets.install_docs(env,pkgdir,glob_build)
